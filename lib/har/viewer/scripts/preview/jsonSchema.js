require.def("preview/jsonSchema",[],function(){return{validate:function(i,l){return this._validate(i,l,false)},checkPropertyChange:function(i,l,m){return this._validate(i,l,m||"property")},_validate:function(i,l,m){function j(b,a,f,d){function c(g){e.push({property:f,message:g})}function h(g,k){if(g){if(typeof g=="string"&&g!="any"&&(g=="null"?k!==null:typeof k!=g)&&!(k instanceof Array&&g=="array")&&!(g=="integer"&&k%1===0))return[{property:f,message:typeof k+" value found, but a "+g+" is required"}];
if(g instanceof Array){for(var o=[],p=0;p<g.length;p++)if(!(o=h(g[p],k)).length)break;if(o.length)return o}else if(typeof g=="object"){o=e;e=[];j(k,g,f);g=e;e=o;return g}}return[]}var n;f+=f?typeof d=="number"?"["+d+"]":typeof d=="undefined"?"":"."+d:d;if((typeof a!="object"||a instanceof Array)&&(f||typeof a!="function")){if(typeof a=="function")b instanceof a||c("is not an instance of the class/constructor "+a.name);else a&&c("Invalid schema/property definition "+a);return null}m&&a.readonly&&c("is a readonly field, it can not be changed");
a["extends"]&&j(b,a["extends"],f,d);if(b===undefined)a.optional||c("is missing and it is not optional");else{e=e.concat(h(a.type,b));a.disallow&&!h(a.disallow,b).length&&c(" disallowed value was matched");if(b!==null){if(b instanceof Array){if(a.items)if(a.items instanceof Array){d=0;for(n=b.length;d<n;d++)e.concat(j(b[d],a.items[d],f,d))}else{d=0;for(n=b.length;d<n;d++)e.concat(j(b[d],a.items,f,d))}a.minItems&&b.length<a.minItems&&c("There must be a minimum of "+a.minItems+" in the array");a.maxItems&&
b.length>a.maxItems&&c("There must be a maximum of "+a.maxItems+" in the array")}else a.properties&&e.concat(s(b,a.properties,f,a.additionalProperties));a.pattern&&typeof b=="string"&&!b.match(a.pattern)&&c("does not match the regex pattern "+a.pattern);a.maxLength&&typeof b=="string"&&b.length>a.maxLength&&c("may only be "+a.maxLength+" characters long");a.minLength&&typeof b=="string"&&b.length<a.minLength&&c("must be at least "+a.minLength+" characters long");typeof a.minimum!==undefined&&typeof b==
typeof a.minimum&&a.minimum>b&&c("must have a minimum value of "+a.minimum);typeof a.maximum!==undefined&&typeof b==typeof a.maximum&&a.maximum<b&&c("must have a maximum value of "+a.maximum);if(a["enum"]){d=a["enum"];n=d.length;for(var r,q=0;q<n;q++)if(d[q]===b){r=1;break}r||c("does not have a value in the enumeration "+d.join(", "))}typeof a.maxDecimal=="number"&&b.toString().match(new RegExp("\\.[0-9]{"+(a.maxDecimal+1)+",}"))&&c("may only have "+a.maxDecimal+" digits of decimal places")}}return null}
function s(b,a,f,d){if(typeof a=="object"){if(typeof b!="object"||b instanceof Array)e.push({property:f,message:"an object is required"});for(var c in a)if(a.hasOwnProperty(c)&&!(c.charAt(0)=="_"&&c.charAt(1)=="_")){var h=b[c];j(h,a[c],f,c)}}for(c in b){b.hasOwnProperty(c)&&!(c.charAt(0)=="_"&&c.charAt(1)=="_")&&a&&!a[c]&&d===false&&e.push({property:f,message:typeof h+"The property "+c+" is not defined in the schema and the schema does not allow additional properties"});(h=a&&a[c]&&a[c].requires)&&
!(h in b)&&e.push({property:f,message:"the presence of the property "+c+" requires that "+h+" also be present"});h=b[c];a&&typeof a=="object"&&!(c in a)&&j(h,d,f,c);if(!m&&h&&h.$schema)e=e.concat(j(h,h.$schema,f,c))}return e}var e=[];if(l)j(i,l,"",m||"");!m&&i&&i.$schema&&j(i,i.$schema,"","");return{valid:!e.length,errors:e}}}});